generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Custom session model for authentication
model Session {
  id        String   @id
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                         String                    @id @default(cuid())
  name                       String?
  email                      String?                   @unique
  username                   String                    @unique
  phoneNumber                String?
  password                   String?
  status                     SystemStatus              @default(ACTIVE)
  userType                   UserType
  emailVerified              DateTime?
  dateOfBirth                DateTime?
  profileData                Json?
  accessScope                AccessScope               @default(SINGLE_CAMPUS)
  primaryCampusId            String?
  createdAt                  DateTime                  @default(now())
  updatedAt                  DateTime                  @updatedAt
  deletedAt                  DateTime?
  lastLoginAt                DateTime?
  resetToken                 String?                   @unique
  resetTokenExpiry           DateTime?
  institutionId              String
  analyticsEvents            AnalyticsEvent[]
  analyticsMetrics           AnalyticsMetric[]
  gradedSubmissions          AssessmentSubmission[]    @relation("GradedSubmissions")
  createdAssessments         Assessment[]              @relation("CreatedAssessments")
  updatedAssessments         Assessment[]              @relation("UpdatedAssessments")
  auditLogs                  AuditLog[]
  coordinatorProfile         CoordinatorProfile?
  createdFeedback            FeedbackBase[]            @relation("CreatedFeedback")
  feedbackResponses          FeedbackResponse[]        @relation("UserFeedbackResponses")
  createdGradeBooks          GradeBook[]               @relation("CreatedGradeBooks")
  updatedGradeBooks          GradeBook[]               @relation("UpdatedGradeBooks")
  resourcePermissions        ResourcePermission[]
  ownedResources             Resource[]                @relation("OwnedResources")
  createdEnrollments         StudentEnrollment[]       @relation("CreatedEnrollments")
  updatedEnrollments         StudentEnrollment[]       @relation("UpdatedEnrollments")
  studentFeedbacks           StudentFeedback[]
  studentProfile             StudentProfile?
  teacherFeedbacks           TeacherFeedback[]
  teacherProfile             TeacherProfile?
  sessions                   Session[]
  activeCampuses             UserCampusAccess[]
  permissions                UserPermission[]
  institution                Institution               @relation(fields: [institutionId], references: [id])
  files                      File[]
  conversationParticipations ConversationParticipant[]
  sentMessages               Message[]
  holidays                   Holiday[]                 @relation("HolidayUsers")
  createdHolidays            Holiday[]                 @relation("HolidayCreator")
  calendarEvents             AcademicCalendarEvent[]   @relation("EventUsers")
  createdEvents              AcademicCalendarEvent[]   @relation("EventCreator")
  // Add Academic Cycle relations
  createdCycles              AcademicCycle[]           @relation("CycleCreator")
  updatedCycles              AcademicCycle[]           @relation("CycleUpdater")
  createdPolicies            AssessmentPolicy[]        @relation("CreatedPolicies")
  updatedPolicies            AssessmentPolicy[]        @relation("UpdatedPolicies")
  createdGradingScales       GradingScaleModel[]       @relation("CreatedGradingScales")
  updatedGradingScales       GradingScaleModel[]       @relation("UpdatedGradingScales")
  ActivityGrade              ActivityGrade[]

  @@index([institutionId, email])
  @@index([institutionId, username])
  @@index([institutionId, status])
  @@map("users")
}

model Permission {
  id          String           @id @default(cuid())
  code        String           @unique
  name        String
  description String?
  scope       AccessScope
  entityType  EntityType?
  status      SystemStatus     @default(ACTIVE)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  users       UserPermission[]

  @@map("permissions")
}

model UserPermission {
  id           String       @id @default(cuid())
  userId       String
  permissionId String
  campusId     String?
  status       SystemStatus @default(ACTIVE)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?
  campus       Campus?      @relation(fields: [campusId], references: [id])
  permission   Permission   @relation(fields: [permissionId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([userId, permissionId, campusId])
  @@index([userId, status])
  @@index([permissionId, campusId])
  @@map("user_permissions")
}

model Campus {
  id               String                     @id @default(cuid())
  code             String                     @unique
  name             String
  status           SystemStatus               @default(ACTIVE)
  institutionId    String
  address          Json
  contact          Json
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  analyticsEvents  AnalyticsEvent[]
  analyticsMetrics AnalyticsMetric[]
  auditLogs        AuditLog[]
  features         CampusFeature[]
  institution      Institution                @relation(fields: [institutionId], references: [id])
  CourseCampus     CourseCampus[]
  facilities       Facility[]
  programs         ProgramCampus[]
  teacherSubjects  TeacherSubjectAssignment[]
  userAccess       UserCampusAccess[]
  permissions      UserPermission[]
  holidays         Holiday[]
  calendarEvents   AcademicCalendarEvent[]

  @@index([institutionId, code])
  @@map("campuses")
}

model UserCampusAccess {
  id        String       @id @default(cuid())
  userId    String
  campusId  String
  roleType  UserType
  startDate DateTime     @default(now())
  endDate   DateTime?
  status    SystemStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  deletedAt DateTime?
  campus    Campus       @relation(fields: [campusId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@unique([userId, campusId])
  @@index([userId, status])
  @@index([campusId, roleType])
  @@map("user_campus_access")
}

model Program {
  id              String          @id @default(cuid())
  code            String          @unique
  name            String
  type            String
  level           Int             @default(1)
  duration        Int
  settings        Json?
  curriculum      Json?
  institutionId   String
  status          SystemStatus    @default(ACTIVE)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
  courses         Course[]
  campusOfferings ProgramCampus[]
  institution     Institution     @relation(fields: [institutionId], references: [id])

  @@index([institutionId, code])
  @@index([institutionId, status])
  @@map("programs")
}

model ProgramCampus {
  id              String         @id @default(cuid())
  programId       String
  campusId        String
  startDate       DateTime       @default(now())
  endDate         DateTime?
  status          SystemStatus   @default(ACTIVE)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deletedAt       DateTime?
  classes         Class[]
  courseOfferings CourseCampus[]
  campus          Campus         @relation(fields: [campusId], references: [id])
  program         Program        @relation(fields: [programId], references: [id])

  @@unique([programId, campusId])
  @@map("program_campus")
}

model Course {
  id                 String                    @id @default(cuid())
  code               String                    @unique
  name               String
  description        String?
  level              Int                       @default(1)
  credits            Float                     @default(1.0)
  programId          String
  settings           Json?
  syllabus           Json?
  status             SystemStatus              @default(ACTIVE)
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  deletedAt          DateTime?
  campusOfferings    CourseCampus[]
  isPrerequisiteFor  CoursePrerequisite[]      @relation("CoursePrerequisites")
  prerequisites      CoursePrerequisite[]      @relation("PrerequisiteCourses")
  program            Program                   @relation(fields: [programId], references: [id])
  studentCompletions StudentCourseCompletion[]
  subjects           Subject[]
  terms              Term[]

  @@index([programId, code])
  @@index([programId, status])
  @@index([level, status])
  @@map("courses")
}

// Add new enums for Term types and periods
enum TermType {
  SEMESTER
  TRIMESTER
  QUARTER
  THEME_BASED
  CUSTOM
}

enum TermPeriod {
  FALL
  SPRING
  SUMMER
  WINTER
  FIRST_QUARTER
  SECOND_QUARTER
  THIRD_QUARTER
  FOURTH_QUARTER
  FIRST_TRIMESTER
  SECOND_TRIMESTER
  THIRD_TRIMESTER
  THEME_UNIT
}

model Term {
  id                String             @id @default(cuid())
  code              String             @unique
  name              String
  description       String?
  termType          TermType           @default(SEMESTER)
  termPeriod        TermPeriod         @default(FALL)
  startDate         DateTime
  endDate           DateTime
  courseId          String
  academicCycleId   String
  status            SystemStatus       @default(ACTIVE)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  course            Course             @relation(fields: [courseId], references: [id])
  academicCycle     AcademicCycle      @relation(fields: [academicCycleId], references: [id])
  classes           Class[]
  assessments       Assessment[]
  facilitySchedules FacilitySchedule[]
  gradeBooks        GradeBook[]
  teacherSchedules  TeacherSchedule[]
  schedulePatternId String?
  schedulePattern   SchedulePattern?   @relation(fields: [schedulePatternId], references: [id])

  @@index([courseId, code])
  @@index([courseId, status])
  @@index([academicCycleId])
  @@index([termType, termPeriod])
  @@map("terms")
}

model Subject {
  id                    String                        @id @default(cuid())
  code                  String                        @unique
  name                  String
  credits               Float                         @default(1.0)
  status                SystemStatus                  @default(ACTIVE)
  courseId              String
  syllabus              Json?
  createdAt             DateTime                      @default(now())
  updatedAt             DateTime                      @updatedAt
  activities            Activity[]
  assessments           Assessment[]
  course                Course                        @relation(fields: [courseId], references: [id])
  teacherQualifications TeacherSubjectQualification[]
  topics                SubjectTopic[] // New relationship to topics

  @@map("subjects")
}

model TeacherSubjectQualification {
  id                String                     @id @default(cuid())
  teacherId         String
  subjectId         String
  level             String
  isVerified        Boolean                    @default(false)
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  campusAssignments TeacherSubjectAssignment[]
  subject           Subject                    @relation(fields: [subjectId], references: [id])
  teacher           TeacherProfile             @relation(fields: [teacherId], references: [id])

  @@unique([teacherId, subjectId])
  @@map("teacher_subject_qualifications")
}

model TeacherSubjectAssignment {
  id              String                      @id @default(cuid())
  qualificationId String
  campusId        String
  courseCampusId  String
  status          SystemStatus                @default(ACTIVE)
  startDate       DateTime                    @default(now())
  endDate         DateTime?
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt
  campus          Campus                      @relation(fields: [campusId], references: [id])
  courseCampus    CourseCampus                @relation(fields: [courseCampusId], references: [id])
  qualification   TeacherSubjectQualification @relation(fields: [qualificationId], references: [id])
  periods         TimetablePeriod[]

  @@unique([qualificationId, campusId, courseCampusId])
  @@map("teacher_subject_assignments")
}

model Timetable {
  id                String            @id @default(cuid())
  name              String
  startDate         DateTime
  endDate           DateTime
  status            SystemStatus      @default(ACTIVE)
  courseCampusId    String
  classId           String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  periods           TimetablePeriod[]
  class             Class             @relation(fields: [classId], references: [id])
  courseCampus      CourseCampus      @relation(fields: [courseCampusId], references: [id])
  schedulePatternId String?
  schedulePattern   SchedulePattern?  @relation(fields: [schedulePatternId], references: [id])

  @@unique([classId, startDate, endDate])
  @@map("timetables")
}

model TimetablePeriod {
  id               String                   @id @default(cuid())
  dayOfWeek        DayOfWeek
  startTime        DateTime
  endTime          DateTime
  type             PeriodType
  timetableId      String
  assignmentId     String
  facilityId       String?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  deletedAt        DateTime?
  status           SystemStatus             @default(ACTIVE)
  facilitySchedule FacilitySchedulePeriod[]
  teacherSchedule  TeacherSchedulePeriod[]
  assignment       TeacherSubjectAssignment @relation(fields: [assignmentId], references: [id])
  facility         Facility?                @relation(fields: [facilityId], references: [id])
  timetable        Timetable                @relation(fields: [timetableId], references: [id])

  @@index([dayOfWeek, startTime, endTime])
  @@index([facilityId, dayOfWeek])
  @@index([assignmentId, dayOfWeek])
  @@map("timetable_periods")
}

model Class {
  id              String                  @id @default(cuid())
  code            String                  @unique
  name            String
  minCapacity     Int                     @default(1)
  maxCapacity     Int                     @default(30)
  currentCount    Int                     @default(0)
  courseCampusId  String
  termId          String
  classTeacherId  String?
  facilityId      String?
  status          SystemStatus            @default(ACTIVE)
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  deletedAt       DateTime?
  programCampusId String?
  activities      Activity[]
  assessments     Assessment[]
  attendance      Attendance[]
  classTeacher    TeacherProfile?         @relation("ClassTeacher", fields: [classTeacherId], references: [id])
  courseCampus    CourseCampus            @relation(fields: [courseCampusId], references: [id])
  facility        Facility?               @relation(fields: [facilityId], references: [id])
  programCampus   ProgramCampus?          @relation(fields: [programCampusId], references: [id])
  term            Term                    @relation(fields: [termId], references: [id])
  feedback        FeedbackBase[]
  gradeBooks      GradeBook[]
  students        StudentEnrollment[]
  teachers        TeacherAssignment[]
  timetables      Timetable[]
  holidays        Holiday[] // Classes affected by specific holidays
  academicEvents  AcademicCalendarEvent[] // Class-specific events

  @@index([courseCampusId, termId])
  @@index([status, termId])
  @@map("classes")
}

model StudentProfile {
  id                String                    @id @default(cuid())
  userId            String                    @unique
  enrollmentNumber  String                    @unique
  currentGrade      String?
  academicHistory   Json?
  interests         String[]
  achievements      Json[]
  specialNeeds      Json?
  guardianInfo      Json?
  attendanceRate    Float?
  academicScore     Float?
  participationRate Float?
  lastCounseling    DateTime?
  lastParentMeeting DateTime?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  assessments       AssessmentSubmission[]
  attendance        Attendance[]
  courseCompletions StudentCourseCompletion[]
  enrollments       StudentEnrollment[]
  feedback          StudentFeedback[]
  grades            StudentGrade[]
  user              User                      @relation(fields: [userId], references: [id])
  ActivityGrade     ActivityGrade[]

  @@map("student_profiles")
}

model TeacherProfile {
  id                      String                        @id @default(cuid())
  userId                  String                        @unique
  specialization          String?
  qualifications          Json[]
  certifications          Json[]
  experience              Json[]
  expertise               String[]
  publications            Json[]
  achievements            Json[]
  teachingLoad            Float?
  studentFeedbackScore    Float?
  attendanceRate          Float?
  lastTraining            DateTime?
  nextEvaluation          DateTime?
  createdAt               DateTime                      @default(now())
  updatedAt               DateTime                      @updatedAt
  ProfessionalDevelopment ProfessionalDevelopment[]
  classesAsTeacher        Class[]                       @relation("ClassTeacher")
  assignments             TeacherAssignment[]
  feedback                TeacherFeedback[]
  user                    User                          @relation(fields: [userId], references: [id])
  schedules               TeacherSchedule[]
  subjectQualifications   TeacherSubjectQualification[]

  @@map("teacher_profiles")
}

model CoordinatorProfile {
  id               String    @id @default(cuid())
  userId           String    @unique
  department       String?
  qualifications   Json[]
  responsibilities String[]
  managedPrograms  Json[]
  managedCourses   Json[]
  performance      Json?
  lastEvaluation   DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id])

  @@map("coordinator_profiles")
}

model StudentEnrollment {
  id          String         @id @default(cuid())
  studentId   String
  classId     String
  status      SystemStatus   @default(ACTIVE)
  startDate   DateTime       @default(now())
  endDate     DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  createdById String
  updatedById String?
  class       Class          @relation(fields: [classId], references: [id], onDelete: Cascade)
  createdBy   User           @relation("CreatedEnrollments", fields: [createdById], references: [id])
  student     StudentProfile @relation(fields: [studentId], references: [id])
  updatedBy   User?          @relation("UpdatedEnrollments", fields: [updatedById], references: [id])

  @@unique([studentId, classId])
  @@index([studentId, status])
  @@index([classId, status])
  @@map("student_enrollments")
}

model TeacherAssignment {
  id        String         @id @default(cuid())
  teacherId String
  classId   String
  status    SystemStatus   @default(ACTIVE)
  startDate DateTime       @default(now())
  endDate   DateTime?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  class     Class          @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher   TeacherProfile @relation(fields: [teacherId], references: [id])

  @@index([status, classId])
  @@index([teacherId, status])
  @@map("teacher_assignments")
}

model Activity {
  id        String       @id @default(cuid())
  title     String
  type      ActivityType
  status    SystemStatus @default(ACTIVE)
  subjectId String
  topicId   String? // New field for direct topic association
  classId   String
  content   Json

  // New fields for grading integration
  isGradable    Boolean @default(false)
  maxScore      Float?
  passingScore  Float?
  weightage     Float? // Contribution to overall grade
  gradingConfig Json? // Configuration for grading

  // Remove submissions field as it's replaced by ActivityGrade
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  class          Class           @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject        Subject         @relation(fields: [subjectId], references: [id])
  topic          SubjectTopic?   @relation(fields: [topicId], references: [id])
  activityGrades ActivityGrade[] // New relationship to activity grades

  @@index([status, classId])
  @@index([subjectId, type])
  @@index([topicId]) // New index for topic association
  @@map("activities")
}

model Assessment {
  id             String                 @id @default(cuid())
  title          String
  templateId     String?
  institutionId  String
  classId        String
  subjectId      String
  topicId        String? // New field for direct topic association
  termId         String
  maxScore       Float?
  passingScore   Float?
  weightage      Float?
  gradingConfig  Json?
  rubric         Json?
  createdById    String
  updatedById    String?
  status         SystemStatus           @default(ACTIVE)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  deletedAt      DateTime?
  submissions    AssessmentSubmission[]
  class          Class                  @relation(fields: [classId], references: [id], onDelete: Cascade)
  createdBy      User                   @relation("CreatedAssessments", fields: [createdById], references: [id])
  institution    Institution            @relation(fields: [institutionId], references: [id])
  subject        Subject                @relation(fields: [subjectId], references: [id])
  topic          SubjectTopic?          @relation(fields: [topicId], references: [id])
  template       AssessmentTemplate?    @relation(fields: [templateId], references: [id])
  term           Term                   @relation(fields: [termId], references: [id])
  updatedBy      User?                  @relation("UpdatedAssessments", fields: [updatedById], references: [id])
  gradingType    GradingType?
  gradingScaleId String?
  gradingScale   GradingScaleModel?     @relation(fields: [gradingScaleId], references: [id])
  policyId       String?
  policy         AssessmentPolicy?      @relation(fields: [policyId], references: [id])

  @@index([institutionId, status])
  @@index([classId, status])
  @@index([templateId, status])
  @@index([subjectId, status])
  @@index([topicId]) // New index for topic association
  @@index([classId, createdAt])
  @@map("assessments")
}

model AssessmentSubmission {
  id             String           @id @default(cuid())
  assessmentId   String
  studentId      String
  content        Json?
  attachments    Json?
  score          Float?
  grade          String?
  status         SubmissionStatus
  gradingDetails Json?
  feedback       Json?
  comments       String?
  submittedAt    DateTime?
  gradedAt       DateTime?
  gradedById     String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  assessment     Assessment       @relation(fields: [assessmentId], references: [id])
  gradedBy       User?            @relation("GradedSubmissions", fields: [gradedById], references: [id])
  student        StudentProfile   @relation(fields: [studentId], references: [id])

  @@unique([assessmentId, studentId])
  @@index([status, gradedAt])
  @@map("assessment_submissions")
}

model Attendance {
  id            String               @id @default(cuid())
  studentId     String
  classId       String
  date          DateTime
  status        AttendanceStatusType
  remarks       String?
  archiveDate   DateTime?
  archiveStatus SystemStatus?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  class         Class                @relation(fields: [classId], references: [id], onDelete: Cascade)
  student       StudentProfile       @relation(fields: [studentId], references: [id])

  @@unique([studentId, classId, date])
  @@index([date, status])
  @@index([status, archiveStatus])
  @@map("attendance")
}

model Facility {
  id               String             @id @default(cuid())
  code             String             @unique
  name             String
  type             FacilityType
  capacity         Int
  status           SystemStatus       @default(ACTIVE)
  campusId         String
  resources        Json?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  classes          Class[]
  campus           Campus             @relation(fields: [campusId], references: [id])
  schedules        FacilitySchedule[]
  timetablePeriods TimetablePeriod[]

  @@map("facilities")
}

model CampusFeature {
  id        String       @id @default(cuid())
  key       String
  status    SystemStatus @default(ACTIVE)
  settings  Json?
  campusId  String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  campus    Campus       @relation(fields: [campusId], references: [id])

  @@unique([campusId, key])
  @@map("campus_features")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  campusId   String
  entityType String
  entityId   String
  action     String
  changes    Json?
  metadata   Json?
  createdAt  DateTime @default(now())
  campus     Campus   @relation(fields: [campusId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([entityId, entityType])
  @@index([userId, campusId])
  @@index([createdAt, entityType])
  @@index([userId, entityType, createdAt])
  @@map("audit_logs")
}

model AcademicCycle {
  id             String                  @id @default(cuid())
  code           String                  @unique
  name           String
  description    String?
  startDate      DateTime
  endDate        DateTime
  type           String                  @default("ANNUAL")
  duration       Int // Duration in months
  status         SystemStatus            @default(ACTIVE)
  institutionId  String
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  deletedAt      DateTime?
  createdBy      String
  updatedBy      String?
  institution    Institution             @relation(fields: [institutionId], references: [id])
  creator        User                    @relation("CycleCreator", fields: [createdBy], references: [id])
  updater        User?                   @relation("CycleUpdater", fields: [updatedBy], references: [id])
  terms          Term[]
  calendarEvents AcademicCalendarEvent[]
  holidays       Holiday[]

  @@index([institutionId, startDate, endDate])
  @@index([institutionId, status])
  @@index([code])
  @@index([type, status])
  @@map("academic_cycles")
}

enum AcademicCycleType {
  ANNUAL // Traditional academic year
  SEMESTER // Single semester program
  TRIMESTER // Single trimester program
  QUARTER // Single quarter program
  CUSTOM // Custom duration program
}

model AssessmentTemplate {
  id               String             @id @default(cuid())
  code             String             @unique
  title            String
  category         AssessmentCategory
  gradingType      GradingType
  gradingScaleId   String
  gradingScale     GradingScaleModel  @relation(fields: [gradingScaleId], references: [id])
  maxScore         Float
  passingScore     Float
  weightage        Float
  gradingConfig    Json?
  rubric           Json?
  autoGradingRules Json?
  institutionId    String
  status           SystemStatus       @default(ACTIVE)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  institution      Institution        @relation(fields: [institutionId], references: [id])
  assessments      Assessment[]

  @@index([institutionId, category])
  @@index([institutionId, gradingType])
  @@index([gradingScaleId])
  @@map("assessment_templates")
}

model GradeBook {
  id               String         @id @default(cuid())
  classId          String
  termId           String
  calculationRules Json
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  createdById      String
  updatedById      String?
  class            Class          @relation(fields: [classId], references: [id], onDelete: Cascade)
  createdBy        User           @relation("CreatedGradeBooks", fields: [createdById], references: [id])
  term             Term           @relation(fields: [termId], references: [id])
  updatedBy        User?          @relation("UpdatedGradeBooks", fields: [updatedById], references: [id])
  studentGrades    StudentGrade[]

  @@unique([classId, termId])
  @@map("grade_books")
}

model StudentGrade {
  id               String              @id @default(cuid())
  gradeBookId      String
  studentId        String
  assessmentGrades Json
  activityGrades   Json? // New field for activity grades
  finalGrade       Float?
  letterGrade      String?
  attendance       Float?
  comments         String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  status           SystemStatus        @default(ACTIVE)
  archiveDate      DateTime?
  gradeBook        GradeBook           @relation(fields: [gradeBookId], references: [id])
  student          StudentProfile      @relation(fields: [studentId], references: [id])
  topicGrades      StudentTopicGrade[] // New relationship to topic grades

  @@unique([gradeBookId, studentId])
  @@index([studentId, createdAt])
  @@index([finalGrade, letterGrade])
  @@map("student_grades")
}

model Institution {
  id                  String               @id @default(cuid())
  code                String               @unique
  name                String
  status              SystemStatus         @default(ACTIVE)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicCycles      AcademicCycle[]
  analyticsEvents     AnalyticsEvent[]
  analyticsMetrics    AnalyticsMetric[]
  assessmentTemplates AssessmentTemplate[]
  assessments         Assessment[]
  campuses            Campus[]
  programs            Program[]
  users               User[]

  @@map("institutions")
}

model FeedbackBase {
  id              String           @id @default(cuid())
  type            FeedbackType
  severity        FeedbackSeverity
  title           String
  description     String
  academicCycle   String?
  term            String?
  classId         String?
  tags            String[]
  attachments     Json?
  createdById     String
  status          SystemStatus     @default(ACTIVE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  class           Class?           @relation(fields: [classId], references: [id])
  createdBy       User             @relation("CreatedFeedback", fields: [createdById], references: [id])
  studentFeedback StudentFeedback?
  teacherFeedback TeacherFeedback?

  @@index([createdById])
  @@index([type])
  @@index([severity])
  @@map("feedback_base")
}

model StudentFeedback {
  id             String             @id @default(cuid())
  studentId      String
  feedbackBaseId String             @unique
  userId         String?
  responses      FeedbackResponse[] @relation("StudentFeedbackResponses")
  feedbackBase   FeedbackBase       @relation(fields: [feedbackBaseId], references: [id])
  student        StudentProfile     @relation(fields: [studentId], references: [id])
  User           User?              @relation(fields: [userId], references: [id])

  @@index([studentId])
  @@map("student_feedback")
}

model TeacherFeedback {
  id             String             @id @default(cuid())
  teacherId      String
  feedbackBaseId String             @unique
  userId         String?
  responses      FeedbackResponse[] @relation("TeacherFeedbackResponses")
  feedbackBase   FeedbackBase       @relation(fields: [feedbackBaseId], references: [id])
  teacher        TeacherProfile     @relation(fields: [teacherId], references: [id])
  User           User?              @relation(fields: [userId], references: [id])

  @@index([teacherId])
  @@map("teacher_feedback")
}

model FeedbackResponse {
  id                String           @id @default(cuid())
  content           String
  attachments       Json?
  responderId       String
  studentFeedbackId String?
  teacherFeedbackId String?
  status            SystemStatus     @default(ACTIVE)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime?
  responder         User             @relation("UserFeedbackResponses", fields: [responderId], references: [id])
  studentFeedback   StudentFeedback? @relation("StudentFeedbackResponses", fields: [studentFeedbackId], references: [id])
  teacherFeedback   TeacherFeedback? @relation("TeacherFeedbackResponses", fields: [teacherFeedbackId], references: [id])

  @@index([responderId])
  @@index([studentFeedbackId])
  @@index([teacherFeedbackId])
  @@map("feedback_responses")
}

model AnalyticsEvent {
  id            String      @id @default(cuid())
  event         String
  timestamp     DateTime    @default(now())
  userId        String?
  institutionId String
  campusId      String?
  data          Json?
  user          User?       @relation(fields: [userId], references: [id])
  institution   Institution @relation(fields: [institutionId], references: [id])
  campus        Campus?     @relation(fields: [campusId], references: [id])

  @@index([userId, timestamp])
  @@index([institutionId, timestamp])
  @@index([timestamp, campusId])
  @@map("analytics_events")
}

model AnalyticsMetric {
  id            String       @id @default(cuid())
  name          String
  value         Float
  institutionId String
  campusId      String?
  userId        String?
  dimensions    Json?
  tags          Json?
  status        SystemStatus @default(ACTIVE)
  timestamp     DateTime     @default(now())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
  campus        Campus?      @relation(fields: [campusId], references: [id])
  institution   Institution  @relation(fields: [institutionId], references: [id])
  user          User?        @relation(fields: [userId], references: [id])

  @@index([name, timestamp])
  @@index([institutionId, name])
  @@index([institutionId, name, timestamp])
  @@index([institutionId, campusId, timestamp])
  @@map("analytics_metrics")
}

model ProfessionalDevelopment {
  id            String         @id @default(cuid())
  teacherId     String
  type          String
  title         String
  provider      String
  startDate     DateTime
  endDate       DateTime?
  status        SystemStatus
  certification Json?
  teacher       TeacherProfile @relation(fields: [teacherId], references: [id])

  @@index([teacherId, startDate])
}

model CourseCampus {
  id                 String                     @id @default(cuid())
  courseId           String
  campusId           String
  programCampusId    String
  startDate          DateTime                   @default(now())
  endDate            DateTime?
  status             SystemStatus               @default(ACTIVE)
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  deletedAt          DateTime?
  classes            Class[]
  campus             Campus                     @relation(fields: [campusId], references: [id])
  course             Course                     @relation(fields: [courseId], references: [id])
  programCampus      ProgramCampus              @relation(fields: [programCampusId], references: [id])
  teacherAssignments TeacherSubjectAssignment[]
  Timetable          Timetable[]

  @@unique([courseId, campusId, programCampusId])
  @@map("course_campus")
}

model CoursePrerequisite {
  id             String   @id @default(cuid())
  courseId       String
  prerequisiteId String
  type           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  course         Course   @relation("CoursePrerequisites", fields: [courseId], references: [id])
  prerequisite   Course   @relation("PrerequisiteCourses", fields: [prerequisiteId], references: [id])

  @@unique([courseId, prerequisiteId])
  @@map("course_prerequisites")
}

model StudentCourseCompletion {
  id          String                 @id @default(cuid())
  studentId   String
  courseId    String
  status      CourseCompletionStatus
  grade       String?
  completedAt DateTime?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  course      Course                 @relation(fields: [courseId], references: [id])
  student     StudentProfile         @relation(fields: [studentId], references: [id])

  @@unique([studentId, courseId])
  @@index([status, completedAt])
  @@map("student_course_completions")
}

model TeacherSchedule {
  id        String                  @id @default(cuid())
  teacherId String
  termId    String
  startDate DateTime                @default(now())
  endDate   DateTime?
  status    SystemStatus            @default(ACTIVE)
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
  periods   TeacherSchedulePeriod[]
  teacher   TeacherProfile          @relation(fields: [teacherId], references: [id])
  term      Term                    @relation(fields: [termId], references: [id])

  @@index([teacherId, termId])
  @@map("teacher_schedules")
}

model TeacherSchedulePeriod {
  id                String          @id @default(cuid())
  scheduleId        String
  timetablePeriodId String
  status            SystemStatus    @default(ACTIVE)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  schedule          TeacherSchedule @relation(fields: [scheduleId], references: [id])
  timetablePeriod   TimetablePeriod @relation(fields: [timetablePeriodId], references: [id])

  @@unique([scheduleId, timetablePeriodId])
  @@map("teacher_schedule_periods")
}

model FacilitySchedule {
  id         String                   @id @default(cuid())
  facilityId String
  termId     String
  startDate  DateTime                 @default(now())
  endDate    DateTime?
  status     SystemStatus             @default(ACTIVE)
  createdAt  DateTime                 @default(now())
  updatedAt  DateTime                 @updatedAt
  periods    FacilitySchedulePeriod[]
  facility   Facility                 @relation(fields: [facilityId], references: [id])
  term       Term                     @relation(fields: [termId], references: [id])

  @@index([facilityId, termId])
  @@map("facility_schedules")
}

model FacilitySchedulePeriod {
  id                String           @id @default(cuid())
  scheduleId        String
  timetablePeriodId String
  status            SystemStatus     @default(ACTIVE)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  schedule          FacilitySchedule @relation(fields: [scheduleId], references: [id])
  timetablePeriod   TimetablePeriod  @relation(fields: [timetablePeriodId], references: [id])

  @@unique([scheduleId, timetablePeriodId])
  @@map("facility_schedule_periods")
}

model Resource {
  id          String               @id @default(cuid())
  title       String
  description String?
  type        ResourceType
  url         String?
  tags        String[]
  access      ResourceAccess       @default(PRIVATE)
  settings    Json?
  ownerId     String
  parentId    String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  deletedAt   DateTime?
  status      SystemStatus         @default(ACTIVE)
  permissions ResourcePermission[]
  owner       User                 @relation("OwnedResources", fields: [ownerId], references: [id])
  parent      Resource?            @relation("ResourceHierarchy", fields: [parentId], references: [id])
  children    Resource[]           @relation("ResourceHierarchy")

  @@index([ownerId])
  @@index([parentId])
  @@index([status])
  @@map("resources")
}

model ResourcePermission {
  id         String         @id @default(cuid())
  resourceId String
  userId     String
  access     ResourceAccess
  settings   Json?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  resource   Resource       @relation(fields: [resourceId], references: [id])
  user       User           @relation(fields: [userId], references: [id])

  @@unique([resourceId, userId])
  @@index([resourceId])
  @@index([userId])
  @@map("resource_permissions")
}

model File {
  id           String       @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  bucket       String?
  key          String?
  url          String?
  isPublic     Boolean      @default(false)
  tags         String[]     @default([])
  entityType   String?
  entityId     String?
  ownerId      String
  owner        User         @relation(fields: [ownerId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  status       SystemStatus @default(ACTIVE)

  @@index([ownerId])
  @@index([entityType, entityId])
  @@index([status])
  @@map("files")
}

model Conversation {
  id           String                    @id @default(cuid())
  title        String?
  type         ConversationType
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  status       SystemStatus              @default(ACTIVE)
  messages     Message[]
  participants ConversationParticipant[]

  @@index([status])
  @@map("conversations")
}

model ConversationParticipant {
  id                String       @id @default(cuid())
  conversationId    String
  userId            String
  isAdmin           Boolean      @default(false)
  joinedAt          DateTime     @default(now())
  leftAt            DateTime?
  status            SystemStatus @default(ACTIVE)
  conversation      Conversation @relation(fields: [conversationId], references: [id])
  user              User         @relation(fields: [userId], references: [id])
  lastReadMessageId String?

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([userId])
  @@map("conversation_participants")
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  attachments    String[]      @default([])
  sentAt         DateTime      @default(now())
  editedAt       DateTime?
  status         MessageStatus @default(SENT)
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  sender         User          @relation(fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([senderId])
  @@map("messages")
}

enum SystemStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  DELETED
  ARCHIVED_CURRENT_YEAR
  ARCHIVED_PREVIOUS_YEAR
  ARCHIVED_HISTORICAL
}

enum UserType {
  // System Level Roles
  SYSTEM_ADMIN
  SYSTEM_MANAGER

  // Institution Level Roles
  ADMINISTRATOR

  // Campus Level Roles
  CAMPUS_ADMIN
  CAMPUS_COORDINATOR
  COORDINATOR

  // Academic Roles
  TEACHER
  CAMPUS_TEACHER

  // Student Roles
  STUDENT
  CAMPUS_STUDENT

  // Other Roles
  CAMPUS_PARENT
}

enum AccessScope {
  SYSTEM
  MULTI_CAMPUS
  SINGLE_CAMPUS
}

enum EntityType {
  PROGRAM
  COURSE
  SUBJECT
  CLASS
  ASSESSMENT
  ACTIVITY
  FACILITY
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum PeriodType {
  LECTURE
  LAB
  TUTORIAL
  WORKSHOP
  EXAM
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  GRADED
  RETURNED
  RESUBMITTED
  LATE
  REJECTED
}

enum AttendanceStatusType {
  PRESENT
  ABSENT
  LATE
  EXCUSED
  LEAVE
}

enum AcademicPeriodType {
  REGULAR
  SUMMER
  WINTER
  SPECIAL
}

enum AssessmentCategory {
  EXAM
  QUIZ
  ASSIGNMENT
  PROJECT
  PRACTICAL
  CLASS_ACTIVITY
}

enum GradingType {
  AUTOMATIC
  MANUAL
  HYBRID
}

enum GradingScale {
  PERCENTAGE
  LETTER_GRADE
  GPA
  CUSTOM
}

enum FacilityType {
  CLASSROOM
  LABORATORY
  WORKSHOP
  LIBRARY
  AUDITORIUM
  OTHER
}

enum SubjectNodeType {
  CHAPTER
  TOPIC
  SUBTOPIC
}

enum CompetencyLevel {
  BASIC
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum LearningObjectiveType {
  KNOWLEDGE
  COMPREHENSION
  APPLICATION
  ANALYSIS
  SYNTHESIS
  EVALUATION
}

enum NotificationType {
  ANNOUNCEMENT
  ALERT
  REMINDER
  UPDATE
  ACADEMIC
  ADMINISTRATIVE
  EVENT
  EMERGENCY
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  EXPIRED
  CANCELLED
}

enum NotificationDeliveryType {
  IN_APP
  EMAIL
  SMS
  PUSH
  ALL
}

enum ActivityType {
  QUIZ
  ASSIGNMENT
  PROJECT
  PRACTICE
  HOMEWORK
  OTHER
}

enum AnalyticsEventType {
  LOGIN
  ASSESSMENT_SUBMISSION
  ATTENDANCE_MARKED
  GRADE_UPDATED
  FEEDBACK_ADDED
  RESOURCE_ACCESS
  SYSTEM_ERROR
  PERFORMANCE_METRIC
  CLASS_CREATED
  CLASS_UPDATED
  ENROLLMENT_CHANGED
  TEACHER_ASSIGNED
  SCHEDULE_UPDATED
  COURSE_CREATED
  COURSE_UPDATED
  COURSE_ARCHIVED
  COURSE_ENROLLMENT_CHANGED
}

enum FeedbackType {
  ACADEMIC_PERFORMANCE
  BEHAVIORAL
  ATTENDANCE
  PARTICIPATION
  IMPROVEMENT_AREA
  ACHIEVEMENT
  DISCIPLINARY
}

enum FeedbackSeverity {
  POSITIVE
  NEUTRAL
  CONCERN
  CRITICAL
}

enum FeedbackStatus {
  DRAFT
  SUBMITTED
  IN_REVIEW
  RESOLVED
  ARCHIVED
}

enum CourseCompletionStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum ResourceType {
  FILE
  FOLDER
  LINK
}

enum ResourceAccess {
  PRIVATE
  SHARED
  PUBLIC
}

enum ConversationType {
  DIRECT
  GROUP
  ANNOUNCEMENT
  CLASS
  DEPARTMENT
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  DELETED
}

// Calendar Management Enums
enum HolidayType {
  NATIONAL
  RELIGIOUS
  INSTITUTIONAL
  ADMINISTRATIVE
  WEATHER
  OTHER
}

enum AcademicEventType {
  REGISTRATION
  ADD_DROP
  WITHDRAWAL
  EXAMINATION
  GRADING
  ORIENTATION
  GRADUATION
  OTHER
}

enum RecurrenceType {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  CUSTOM
}

// Calendar Management Models
model GradingScaleModel {
  id                  String               @id @default(cuid())
  name                String
  type                GradingType
  scale               GradingScale
  minScore            Float
  maxScore            Float
  ranges              Json
  status              SystemStatus         @default(ACTIVE)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  createdById         String
  updatedById         String?
  createdBy           User                 @relation("CreatedGradingScales", fields: [createdById], references: [id])
  updatedBy           User?                @relation("UpdatedGradingScales", fields: [updatedById], references: [id])
  assessments         Assessment[]
  assessmentTemplates AssessmentTemplate[]

  @@map("grading_scales")
}

model Holiday {
  id              String         @id @default(cuid())
  name            String
  description     String?
  startDate       DateTime
  endDate         DateTime
  type            HolidayType
  affectsAll      Boolean        @default(true)
  status          SystemStatus   @default(ACTIVE)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deletedAt       DateTime?
  createdBy       String
  academicCycleId String? // Optional link to academic cycle
  campuses        Campus[] // Many-to-many relationship
  classes         Class[] // Classes affected by this holiday
  users           User[]         @relation("HolidayUsers")
  creator         User           @relation("HolidayCreator", fields: [createdBy], references: [id])
  academicCycle   AcademicCycle? @relation(fields: [academicCycleId], references: [id])

  @@index([startDate, endDate])
  @@index([type, status])
  @@index([academicCycleId])
  @@map("holidays")
}

model AcademicCalendarEvent {
  id              String            @id @default(cuid())
  name            String
  description     String?
  startDate       DateTime
  endDate         DateTime
  type            AcademicEventType
  priority        EventPriority     @default(NORMAL)
  status          SystemStatus      @default(ACTIVE)
  academicCycleId String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  createdBy       String
  campuses         Campus[] // Many-to-many with campuses
  classes          Class[] // Many-to-many with classes
  users            User[]            @relation("EventUsers")
  creator          User              @relation("EventCreator", fields: [createdBy], references: [id])
  academicCycle    AcademicCycle     @relation(fields: [academicCycleId], references: [id])

  @@index([startDate, endDate])
  @@index([type, status])
  @@index([academicCycleId])
  @@index([priority, status])
  @@map("academic_calendar_events")
}

enum EventPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model SchedulePattern {
  id          String              @id @default(cuid())
  name        String
  description String?
  daysOfWeek  String[]
  startTime   String
  endTime     String
  recurrence  RecurrenceType
  startDate   DateTime
  endDate     DateTime?
  status      SystemStatus        @default(ACTIVE)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  deletedAt   DateTime?
  terms       Term[]
  timetables  Timetable[]
  exceptions  ScheduleException[]

  @@index([startDate, endDate])
  @@map("schedule_patterns")
}

model ScheduleException {
  id                String          @id @default(cuid())
  schedulePatternId String
  schedulePattern   SchedulePattern @relation(fields: [schedulePatternId], references: [id])
  exceptionDate     DateTime
  reason            String?
  alternativeDate   DateTime?
  alternativeStart  String? // Time in HH:MM format
  alternativeEnd    String? // Time in HH:MM format
  status            SystemStatus    @default(ACTIVE)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?

  @@index([schedulePatternId, exceptionDate])
  @@map("schedule_exceptions")
}

model AcademicCycleTemplate {
  id                String               @id @default(cuid())
  name              String
  description       String?
  periodStructure   AcademicPeriodType[]
  defaultPeriodDays Int[] // Duration of each period in days
  status            SystemStatus         @default(ACTIVE)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  deletedAt         DateTime?
  defaultHolidays   HolidayTemplate[]

  @@map("academic_cycle_templates")
}

model HolidayTemplate {
  id                      String                 @id @default(cuid())
  name                    String
  description             String?
  dayOffset               Int // Days from academic cycle start
  duration                Int // Number of days
  type                    HolidayType
  status                  SystemStatus           @default(ACTIVE)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  deletedAt               DateTime?
  academicCycleTemplateId String?
  academicCycleTemplate   AcademicCycleTemplate? @relation(fields: [academicCycleTemplateId], references: [id])

  @@map("holiday_templates")
}

model AssessmentPolicy {
  id          String       @id @default(cuid())
  name        String
  description String
  rules       Json
  settings    Json
  status      SystemStatus @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdById String
  updatedById String?
  createdBy   User         @relation("CreatedPolicies", fields: [createdById], references: [id])
  updatedBy   User?        @relation("UpdatedPolicies", fields: [updatedById], references: [id])
  assessments Assessment[]

  @@map("assessment_policies")
}

// New model for topics within subjects
model SubjectTopic {
  id               String           @id @default(cuid())
  code             String // Topic code (unique within subject)
  title            String // Topic title
  description      String? // Topic description
  context          String? // Educational context
  learningOutcomes String? // Structured learning outcomes
  nodeType         SubjectNodeType // CHAPTER, TOPIC, or SUBTOPIC
  orderIndex       Int // For ordering topics within a subject
  estimatedMinutes Int? // Estimated learning time
  competencyLevel  CompetencyLevel? // Required competency level
  keywords         String[] // Searchable keywords
  status           SystemStatus     @default(ACTIVE)

  // Foreign keys
  subjectId     String // Parent subject
  parentTopicId String? // Optional parent topic (for subtopics)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  subject            Subject             @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  parentTopic        SubjectTopic?       @relation("TopicHierarchy", fields: [parentTopicId], references: [id])
  childTopics        SubjectTopic[]      @relation("TopicHierarchy")
  activities         Activity[] // Direct relationship to activities
  assessments        Assessment[] // Direct relationship to assessments
  studentTopicGrades   StudentTopicGrade[] // Student grades for this topic

  @@unique([subjectId, code])
  @@index([subjectId, nodeType])
  @@index([parentTopicId])
  @@index([status])
  @@map("subject_topics")
}

// New model for activity grades
model ActivityGrade {
  id          String           @id @default(cuid())
  activityId  String
  studentId   String
  score       Float? // Grade score
  feedback    String? // Teacher feedback
  status      SubmissionStatus @default(SUBMITTED)
  submittedAt DateTime         @default(now())
  gradedAt    DateTime?
  gradedById  String?
  content     Json? // Student submission content
  attachments Json? // Any submission attachments
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relationships
  activity Activity       @relation(fields: [activityId], references: [id])
  student  StudentProfile @relation(fields: [studentId], references: [id])
  gradedBy User?          @relation(fields: [gradedById], references: [id])

  @@unique([activityId, studentId])
  @@index([studentId])
  @@index([status])
  @@index([gradedAt])
  @@map("activity_grades")
}

// New model for student topic grades
model StudentTopicGrade {
  id              String   @id @default(cuid())
  studentGradeId  String
  topicId         String
  score           Float? // Overall topic score
  assessmentScore Float? // Assessment component
  activityScore   Float? // Activity component
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  studentGrade StudentGrade @relation(fields: [studentGradeId], references: [id], onDelete: Cascade)
  topic        SubjectTopic @relation(fields: [topicId], references: [id])

  @@unique([studentGradeId, topicId])
  @@index([topicId])
  @@map("student_topic_grades")
}
